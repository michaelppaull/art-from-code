---
title: "Gen Art"
author: "Michael Aguirre"
format:
  html: 
    toc: true # includes a table of contents in rendered html format
execute: # for all code chunks
    warning: false # do not display warnings
    message: false # do not display messages
---

GitHub Link: <https://github.com/michaelppaull/art-from-code.git>

## Setup:

```{r}
# load in packages
library(ggplot2)
library(tibble)

library(scales)
library(ggthemes)
library(dplyr)

library(purrr)
library(tidyr)
library(ambient)
library(tictoc)

library(gifski)
library(purrr)

library(ggfx)
library(flametree)
library(ggforce)
```

```{r}
# inspect mpg data
mpg
```

## Exercises

#### Ex I:

```{r}
mpg |>
  ggplot(aes(displ, cty, colour = class)) + 
  geom_jitter(show.legend = FALSE, size = 3, width = 0, height = 1000) +
  geom_jitter(show.legend = FALSE, size = 1, colour = "orange", width = 3.14159) + 
  coord_polar() + 
  theme_void() + 
  scale_color_brewer()
```

#### Ex II:

```{r}
set.seed(1)
n <- 50
dat <- tibble(
  x0 = runif(n),
  y0 = runif(n),
  x1 = x0 + runif(n, min = -.2, max = .2),
  y1 = y0 + runif(n, min = -.2, max = .2),
  shade = runif(n), 
  size = runif(n)
)
dat
```

```{r}
polar_art <- function(seed, n, palette) {
  
  # set the state of the random number generator
  set.seed(seed)
  
  # data frame containing random values for 
  # aesthetics we might want to use in the art
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n)
  )
  
  # plot segments in various colours, using 
  # polar coordinates and a gradient palette
  dat |> 
    ggplot(aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size
    )) +
    geom_segment(show.legend = FALSE) +
    coord_polar() +
    scale_y_continuous(expand = c(0, 0)) +
    scale_x_continuous(expand = c(0, 0)) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void()
}
```

```{r}
polar_art(seed = 2,
          n = (70),
          palette = c("#B4EEB4", "#FFFFF0", "#CD69C9")
)
```

#### Ex III:

```{r}
# the original function from the first session
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}

# the extended function used in later sessions
sample_canva2 <- function(seed = NULL, n = 4) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]] |>
    (\(x) colorRampPalette(x)(n))()  
}
```

```{r}
sample1 <- sample_canva()
show_col(sample1)
```

```{r}
# Define a function called sample_named_colours that takes an integer n as input
sample_named_colours <- function(n) {
  # Use the sample function to randomly select n distinct colors from the set of named colors
  sample(colours(distinct = TRUE), n)
}

# Generate a random palette of 5 colors using the sample_named_colours function
random_palette <- sample_named_colours(5)
# Create a polar art plot using the generated random palette
polar_art(seed = 32,
          n = 314.15924,
          palette = random_palette)
```

```{r}
sample_600_colours <- function(n) {
  sample(unlist(ggthemes::canva_palettes), n)
}
```

```{r}
randy <- sample_600_colours(15)
polar_art(seed = 47,
          n = 121,
          palette = randy)
```

#### Ex IV:

```{r}
# copied this function to check it out
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}

sample_data <- function(seed = NULL, n = 100){
  if(!is.null(seed)) set.seed(seed)
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n),
    shape = factor(sample(0:22, size = n, replace = TRUE))
  )
}

polar_styled_plot <- function(data = NULL, palette) {
  ggplot(
    data = data,
    mapping = aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size
    )) + 
    coord_polar(clip = "off") +
    scale_y_continuous(
      expand = c(0, 0),
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) +
    scale_x_continuous(
      expand = c(0, 0), 
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void() + 
    guides(
      colour = guide_none(),
      size = guide_none(),
      fill = guide_none(),
      shape = guide_none()
    )
}
```

```{r}
dat <- sample_data(n = 100, seed = 1) 
pal <- sample_600_colours(50)

# messing around with this function
polar_styled_plot(data = dat, palette = pal) + geom_segment()
```

```{r}
# I want to generate a mandelbrot visualization
# Utilizing what we know about the mandelbrot set and its relationship with the complex plane
# we will try to generate a function to make a decently zoomed out view of the set while
# messing around with some random colors
# Define the function to generate Mandelbrot set visualization

my_styled_plot <- function(n, palette) {
  # Create a grid of complex numbers
  x <- seq(-2.5, 1.5, length.out = 800)  # sequence for the real part
  y <- seq(-2, 2, length.out = 800)  # Sequence for the Imaginary part
  c <- outer(x, y*1i, "+")  # create a grid o complex numbers
  
  # Initialize variables
  z <- matrix(0, nrow = 800, ncol = 800)  # Matrix to hold the complex values
  k <- matrix(0, nrow = 800, ncol = 800)  # Matrix to count iterations
  
  # Mandelbrot iteration
  for (i in 1:n) {  # loop for the number of iterations
    mask <- Mod(z) <= 2  # Mask to check if the modulus of z is less than or equal to 2
    z[mask] <- z[mask]^2 + c[mask]  # Update z based on the Mandelbrot formula
    k[mask] <- k[mask] + 1  # Increment iteration count where the mask is true
  }
  
  # Prepare data for plotting
  data <- expand.grid(x = x, y = y)  # Create a data frame from the grid
  data$k <- as.vector(k)  # Flatten the iteration count matrix and add to the data frame
  
  # Plot the Mandelbrot set
  ggplot(data, aes(x = x, y = y, fill = k)) +  # Define aesthetics for the plot
    geom_raster(interpolate = TRUE) +  # Use raster graphics to plot
    scale_fill_gradientn(colours = palette) +  # Aply the color palette
    theme_void() +  # Use a theme with no background or axes
    theme(legend.position = "none")  # Remove the legend
}
```

```{r}
mandel <- sample_600_colours(5) # generate some colors to use
my_styled_plot(n = 100,
               palette = mandel) # call the function and specify num iterations and colors to ramp
```

## Art of Choice:

### Spatial Noise Tricks
```{r}
# Generate 800 numbers between 0 and 1 for the x-coordinates
x_coords <- seq(from = 0, to = 1, length.out = 800)  

# Generate 800 numbers between 0 and 1 for the y-coordinates
y_coords <- seq(from = 0, to = 1, length.out = 800)  

# Create a grid with the x and y coordinates
canvas <- long_grid(x = x_coords, y = y_coords)  

# Apply the perlin noise function to the grid to generate a 'paint' column
canvas <- canvas |> 
  mutate(paint = gen_perlin(x, y, frequency = 10, seed = 1234))

# Display the resulting canvas with the "perlin" nose applied
canvas

```
```{r}
# Create a ggplot object with the canvas data, mapping x and y coordinates to the plot
# and using the 'paint' values for the fill aesthetic
art <- ggplot(canvas, aes(x, y, fill = paint)) + 
  # Use the geom_raster function to create a raster plot, which helps for visualizing grids
  geom_raster(show.legend = FALSE)  # ide the legend for a cleaner look

# Display the plot
art

```
```{r}
# sadd a void theme to remove all the background, grid lines, and axes from the plot
art + 
  theme_void() +  # Apply a theme with no background or axes
  coord_equal()  # Ensure that one unit on the x-axis is the same length as one unit on the y-axis

```


```{r}
art + 
  theme_void() + # Apply a theme with no background or axes
  coord_equal() +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_fill_gradientn(colours = sample_600_colours(25)) # reuse sample 600 function to grab a bunch of colors
```
#### Iteration, Tiles, and Pixels
```{r}
tree <- flametree_grow(
  seed = 1, 
  time = 9, 
  angle = c(-15, 15, 30)
)
tree
tree |> 
  flametree_plot(
    background = "#222222", 
    palette = c("#ffffff", "#f652a0")
  )
```


```{r}
leaf <- tree |> filter(id_leaf == TRUE)
trunk <- geom_bezier(
  mapping = aes(coord_x, coord_y, group = id_pathtree, size = seg_wid),
  data = tree, 
  lineend = "round", 
  colour = "#555555",
  show.legend = FALSE
)

leaves <- geom_point(
  mapping = aes(coord_x, coord_y),
  data = leaf, 
  size = 1.3, 
  stroke = 0, 
  colour = "#e38b75"
)

# function to create a polygon layer with specified x, y coordinates, fill color, and transparency
polygon_layer <- function(x, y, fill = "white", alpha = .5) {
  geom_polygon(aes(x, y), fill = fill, alpha = alpha)
}

# create a black triangle
triangle <- polygon_layer(
  x = c(-4, 2, 2), 
  y = c(0, 0, 6), 
  fill = "black",
  alpha = 1
)

# base ggplot object with void theme and equal coordinates scaling
base <- ggplot() + 
  theme_void() +  # no background, axes, or grid lines
  coord_equal(xlim = c(-3, 1), ylim = c(1, 5)) +  # set limits for x and y axes
  scale_x_continuous(expand = c(0, 0)) +  # remove padding around x axis
  scale_y_continuous(expand = c(0, 0)) +  # remove padding around y axis
  scale_size_identity(guide = guide_none())  # use size as-is, no guide

# plot the base with the tree and blend it with the triangle using xor blend type
base +
  as_group(trunk, leaves, id = "tree") +  # group trunk and leaves as tree
  with_blend(triangle, "tree", blend_type = "xor")  # blend triangle with tree using xor

```

## Put It All Together
#### Piece I
```{r}

# Function to generate a pretty pattern using spatial noise
generate_pretty_pattern <- function(seed, size, frequency, palette) {
  # Set seed for reproducibility
  set.seed(seed)
  
  # Create a grid of coordinates
  grid <- long_grid(seq(0, 1, length.out = size), seq(0, 1, length.out = size))
  
  # Generate Perlin noise
  grid <- grid %>% mutate(noise = gen_perlin(x, y, frequency = frequency))
  
  # Create a plot with the noise data
  plot <- ggplot(grid, aes(x = x, y = y, fill = noise)) +
    geom_raster(interpolate = TRUE) +
    scale_fill_gradientn(colours = palette) +
    theme_void() +
    coord_equal() +
    theme(legend.position = "none")  # Remove the legend
  
  # Display the plot
  print(plot)
}

# Example usage
generate_pretty_pattern(seed = 123, size = 800, frequency = 10, palette = sample_600_colours(26))

```

